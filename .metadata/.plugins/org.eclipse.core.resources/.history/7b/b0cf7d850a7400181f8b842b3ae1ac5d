package projekat.demo.controller;

import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.http.HttpSession;

import org.assertj.core.util.DateUtil;
import org.h2.util.DateTimeUtils;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import projekat.demo.dto.ArenaDto;
import projekat.demo.exceptions.ArenaException;
import projekat.demo.exceptions.PlaceException;
import projekat.demo.exceptions.TermException;
import projekat.demo.model.Arena;
import projekat.demo.model.PlaceAdmin;
import projekat.demo.model.Term;
import projekat.demo.service.ArenaService;
import projekat.demo.service.ProjectionService;

@RestController
@RequestMapping("/arenas")
public class ArenaController {

	private Logger logger = org.slf4j.LoggerFactory.getLogger(this.getClass());

	@Autowired
	private ArenaService arenaService;
	
	@Autowired
	private ProjectionService projectionService;
	
	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Iterable<Arena>> getArenas() {

		logger.info("> getArenas");
		Iterable<Arena> arenas = arenaService.findAllArenas();
		logger.info("< getArenas");
		return new ResponseEntity<Iterable<Arena>>(arenas, HttpStatus.OK);
	}

	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE, value="/arenaByPlace")
	public ResponseEntity<Iterable<Arena>> getArenasByPlace(HttpSession s) {

		logger.info("> getArenas");
		PlaceAdmin pa = (PlaceAdmin)s.getAttribute("loginUser");
		
		Iterable<Arena> arenas = arenaService.findArenaByPlace(pa.getPlace());
		logger.info("< getArenas");
		return new ResponseEntity<Iterable<Arena>>(arenas, HttpStatus.OK);
	}
	
	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE, value="/availableArenas")
	public ResponseEntity<Iterable<Arena>> getAvailableAreans(@RequestParam("date") String datetime, @RequestParam("duration") int duration, HttpSession s) throws ParseException {
		
		logger.info("> Searching available arenas for " + datetime + " in duration of " + duration);
		ArrayList<Arena> retVal = new ArrayList<Arena>();
		
		boolean available = false;
		
		String sdate = datetime.split("T")[0];
		String stime = datetime.split("T")[1];
		
		Date date = new SimpleDateFormat("yyyy-MM-dd").parse(sdate);
		Date time =  new SimpleDateFormat("hh:mm").parse(stime);
		
		Date startdate = new Date(date.getYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes());
		Calendar start = Calendar.getInstance();
		start.setTime(startdate);
		Calendar end = Calendar.getInstance();
		end.setTime(startdate);
		end.add(Calendar.MINUTE, duration);
		
		logger.info("> Parsed start date " + start.getTime());
		logger.info("> Parsed end date " + end.getTime());
		
		PlaceAdmin pa = (PlaceAdmin)s.getAttribute("loginUser");
		ArrayList<Arena> arenas = (ArrayList<Arena>) arenaService.findArenaByPlace(pa.getPlace());

		for(Arena a : arenas) {
			ArrayList<Term> terms = (ArrayList<Term>) projectionService.findTermByArenaId(a.getId());
			
			available = true;
			for(Term t : terms) {
				logger.info("> Arena: " + a.getName() + " Term: " + t.getId());			
				
				Date termstartdate = new Date(t.getProjectionDate().getYear(), t.getProjectionDate().getMonth(), t.getProjectionDate().getDate(), t.getProjectionTime().getHours(), t.getProjectionTime().getMinutes());
				Calendar termend = Calendar.getInstance();
				termend.setTime(termstartdate);
				termend.add(Calendar.MINUTE, t.getProjection().getDuration());
				
				if () {
					
				}
			}
		}
		
			
		
		logger.info("< Searching available arenas");

		return new ResponseEntity<Iterable<Arena>>(retVal, HttpStatus.OK);
	}
	
	@PostMapping(consumes = "application/json", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> createArena(@RequestBody ArenaDto arenaDto) {
		logger.info("> adding arena started");

		try {
			arenaService.createArena(arenaDto);
			logger.info("< adding arena");
			return new ResponseEntity<String>("Arena successfully created", HttpStatus.CREATED);
		} catch (PlaceException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.EXPECTATION_FAILED);
		} catch (TermException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.EXPECTATION_FAILED);
		} catch (ArenaException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.ALREADY_REPORTED);
		}

	}
	
	@PutMapping(value = "/{arenaId}", consumes = "application/json", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> updateArena(@PathVariable Long arenaId, @RequestBody ArenaDto arenaDto) {
		logger.info("> updating arena started");

		try {
			arenaService.updateArena(arenaId, arenaDto);
			logger.info("< updating arena");
			return new ResponseEntity<String>("Arena successfully updated", HttpStatus.CREATED);
		} catch (PlaceException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.EXPECTATION_FAILED);
		} catch (TermException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.EXPECTATION_FAILED);
		} catch (ArenaException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}

	}
	
	@DeleteMapping(value = "/{arenaId}", consumes = "application/json", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> deleteArena(@PathVariable Long arenaId) {
		logger.info("> deleting arena started");

		try {
			arenaService.deleteArena(arenaId);
			logger.info("< deleting arena");
			return new ResponseEntity<String>("Arena successfully deleted", HttpStatus.CREATED);
		} catch (PlaceException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.EXPECTATION_FAILED);
		} catch (TermException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.EXPECTATION_FAILED);
		} catch (ArenaException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}

	}
	
	

}
