package projekat.demo.model;

import java.io.Serializable;

import java.time.LocalDate;
import java.time.LocalTime;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import com.fasterxml.jackson.annotation.JsonBackReference;

import com.fasterxml.jackson.annotation.JsonManagedReference;

@Entity

public class Term implements Serializable, Comparable<Term> {

	private static final long serialVersionUID = -7156861256132077357L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;

	@Column(nullable = false)
	private LocalDate projectionDate;

	@Column(nullable = false)
	private LocalTime projectionTime;

	@Column(nullable = false)
	private double price;

	@JsonBackReference(value = "arena")
	@ManyToOne(optional = false)
	private Arena arena; // sala u kojoj se odrzava film ili predstava

	@JsonManagedReference(value = "term-projection")
	@ManyToOne(optional = false)
	private Projection projection;

	public Term() {
	}

	public Term(Long id, LocalDate projectionDate, LocalTime projectionTime, double price, Arena arena,
			Set<Reservation> reservations, Projection projection) {
		super();
		this.id = id;
		this.projectionDate = projectionDate;
		this.projectionTime = projectionTime;
		this.price = price;
		this.arena = arena;
		this.reservations = reservations;
		this.projection = projection;
	}

	public Term(Date projectionDate, Time projectionTime, double price, Arena arena, Set<Reservation> reservations,
			Projection projection) {
		super();
		this.projectionDate = projectionDate;
		this.projectionTime = projectionTime;
		this.price = price;
		this.arena = arena;
		this.reservations = reservations;
		this.projection = projection;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public LocalDate getProjectionDate() {
		return projectionDate;
	}

	public void setProjectionDate(LocalDate projectionDate) {
		this.projectionDate = projectionDate;
	}

	public LocalTime getProjectionTime() {
		return projectionTime;
	}

	public void setProjectionTime(LocalTime projectionTime) {
		this.projectionTime = projectionTime;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public Arena getArena() {
		return arena;
	}

	public void setArena(Arena arena) {
		this.arena = arena;
	}

	public Set<Reservation> getReservations() {
		return reservations;
	}

	public void setReservations(Set<Reservation> reservations) {
		this.reservations = reservations;
	}

	public Projection getProjection() {
		return projection;
	}

	public void setProjection(Projection projection) {
		this.projection = projection;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public int compareTo(Term compTerm) {
		if (getProjectionDate() == null || getProjectionTime() == null || compTerm.getProjectionDate() == null || compTerm.getProjectionTime() == null) {
			return 0;
		}
		
		LocalDate thisDate = new LocalDate(getProjectionDate().getTime() + getProjectionTime().getTime());
		LocalDate compDate = new LocalDate(compTerm.getProjectionDate().getTime() + compTerm.getProjectionTime().getTime());
		
		return thisDate.compareTo(compDate);
	}

}